{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/gifGridHelper.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","alert","className","type","value","placeholder","onChange","target","GifGridItem","title","url","src","alt","getGifs","category","a","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","setTimeout","then","imgs","useFetchGifs","numElementos","elementosPorColumna","Math","ceil","divs","crearDivs","i","gifGridItem","j","undefined","push","key","handleMap","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"sMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACE,0BAAMC,SAZa,SAACC,GACpBA,EAAEC,iBAC+B,IAA7BJ,EAAWK,OAAOC,OACpBC,MAAM,6BAENT,EAAcE,GACdC,EAAc,OAOd,2BACEO,UAAU,gBACVC,KAAK,OACLC,MAAOV,EACPW,YAAY,qBACZC,SAtBc,SAACT,GACnBF,EAAcE,EAAEU,OAAOH,UAuBrB,2BACEF,UAAU,cACVC,KAAK,SACLC,MAAM,cChCDI,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAClC,OACE,yBAAKR,UAAU,QACb,yBAAKS,IAAKD,EAAKE,IAAKH,IACpB,2BAAIA,K,uBCNGI,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfL,EADe,iDACiCM,UAAUF,GAD3C,gEAEGG,MAAMP,GAFT,cAEfQ,EAFe,gBAGAA,EAAUC,OAHV,uBAGdC,EAHc,EAGdA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GACpB,MAAO,CACLC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAKa,EAAIE,OAAOC,iBAAiBhB,QAThB,kBAadW,GAbc,4CAAH,sDCIPM,EAAU,SAAC,GAAkB,IAAD,ECDb,SAAEb,GAAe,IAAD,EAEdrB,mBAAS,CAC/B2B,KAAM,GACNQ,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAU,WACNC,YAAW,WACPnB,EAAQC,GACPmB,MAAK,SAAAC,GACFJ,EAAS,CACLV,KAAMc,EACNN,SAAS,SAGlB,OACJ,CAACd,IAEGe,EDhBsBM,CAFQ,EAAfrB,UAEZW,EAF2B,EAEhCL,KAAaQ,EAFmB,EAEnBA,QAiCpB,OACE,oCACGA,GAAW,cACZ,yBAAK1B,UAAU,aAlCD,WAChB,GAAIuB,EAAOzB,OAAS,EAAG,CAoBrB,IAlBA,IACMoC,EAAeX,EAAOzB,OACtBqC,EAAsBC,KAAKC,KAAKH,EAFrB,GAGXI,EAAO,GAGPC,EAAY,SAACC,GAEjB,IADA,IAAIC,EAAc,GACTC,EAAIF,EAAEL,EAAqBO,GAAMF,EAAEL,EAAqBA,EAAoB,EAAGO,SACpEC,IAAdpB,EAAOmB,IACTD,EAAYG,KAAK,kBAAC,EAAD,CAAaC,IAAKtB,EAAOmB,GAAGpB,GAAIf,MAAOgB,EAAOmB,GAAGnC,MAAOC,IAAKe,EAAOmB,GAAGlC,OAG5F,OAAOiC,GAKAD,EAAI,EAAGA,EAlBC,EAkBaA,IAC5BF,EAAKM,KAAK,yBAAK5C,UAAU,iBAAiB6C,IAAKL,GAAID,EAAUC,KAG/D,OAAOF,GAUJQ,MEtBMC,EAjBM,WAAO,IAAD,EAEWxD,mBAAS,UAFpB,mBAElByD,EAFkB,KAEN1D,EAFM,KAIzB,OACE,oCACE,yBAAKU,UAAU,UACb,6CACA,kBAAC,EAAD,CAAaV,cAAeA,KAE9B,yBAAKU,UAAU,cACb,kBAAC,EAAD,CAASY,SAAUoC,OCV3BC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.32fcf38c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInput = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length === 0) {\r\n      alert('Ingrese una categoría');\r\n    } else {\r\n      setCategories(inputValue);\r\n      setInputValue('');\r\n    }\r\n    \r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        className='inputCategory'\r\n        type='text'\r\n        value={inputValue}\r\n        placeholder='Nueva categoría'\r\n        onChange={handleInput}\r\n      />\r\n      <input\r\n        className='btnCategory'\r\n        type='submit'\r\n        value='Agregar'\r\n      />\r\n    </form>\r\n  );\r\n\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n  return (\r\n    <div className='card'>\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","export const getGifs = async(category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=100&api_key=WtsK7KVC9yRaOI30OJtdY2q8UJzFHDUT`;\r\n  const respuesta = await fetch(url);\r\n  const {data} = await respuesta.json();\r\n  \r\n  const gifs = data.map(img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images.downsized_medium.url\r\n    }\r\n  });\r\n\r\n  return gifs;\r\n};\r\n\r\n\r\n","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n  const {data:images, loading} = useFetchGifs( category );\r\n\r\n  const handleMap = () => {\r\n    if (images.length > 0) {\r\n\r\n      const columnas = 6;\r\n      const numElementos = images.length;\r\n      const elementosPorColumna = Math.ceil(numElementos / columnas);\r\n      const divs = [];\r\n\r\n      // La función crear divs va a retornar un array con los elementos que tendrá cada unos de los divs del ciclo de arriba\r\n      const crearDivs = (i) => {\r\n        let gifGridItem = [];\r\n        for (let j = i*elementosPorColumna; j <= (i*elementosPorColumna)+elementosPorColumna-1; j++) {\r\n          if (images[j] !== undefined) {\r\n            gifGridItem.push(<GifGridItem key={images[j].id} title={images[j].title} url={images[j].url} />);\r\n          }\r\n        }\r\n        return gifGridItem;\r\n      }\r\n\r\n      // Ciclo del número de columnas, se crea un div por cada columna\r\n      // cada columna se agrega al array \"divs\" que tendrá un tamaño de 6 (1 elemento por columna)\r\n      for (let i = 0; i < columnas; i++) {\r\n        divs.push(<div className='card-container' key={i}>{crearDivs(i)}</div>);\r\n      }\r\n\r\n      return divs;\r\n\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      {loading && 'Cargando...'}\r\n      <div className='card-grid'>\r\n        {handleMap()}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/gifGridHelper'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n        }, 1000);\r\n    }, [category]);\r\n\r\n    return state;\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState('random');\r\n\r\n  return (\r\n    <>\r\n      <div className='header'>\r\n        <h1>GiftExpertApp</h1>\r\n        <AddCategory setCategories={setCategories}/>\r\n      </div>\r\n      <div className='gif-global'>\r\n        <GifGrid category={categories} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GitExpertApp';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n\n"],"sourceRoot":""}